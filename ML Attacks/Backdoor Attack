{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of decision tree: 0.95\n",
      "Accuracy of logistic regression: 0.9166666666666666\n",
      "Accuracy of SVC: 0.9333333333333333\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, precision_score,recall_score\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "df = pd.read_csv('iris.csv')\n",
    "df = df.dropna(axis=0, how='any')\n",
    "\n",
    "#Target Labels:\n",
    "y = df['variety'].values\n",
    "label_encoder = LabelEncoder() # From categorical to numerical labels\n",
    "y = label_encoder.fit_transform(y)\n",
    "\n",
    "#Features\n",
    "features = ['sepal.length','sepal.width','petal.length','petal.width']\n",
    "X = df[features].values\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.40, random_state=0)\n",
    "\n",
    "# Model 1 (Decision Tree):\n",
    "myDEC = DecisionTreeClassifier(max_depth=5, random_state=0)\n",
    "myDEC.fit(X_train, y_train)\n",
    "DEC_predict = myDEC.predict(X_test)\n",
    "print('Accuracy of decision tree: ' + str(accuracy_score(y_test, DEC_predict)))\n",
    "\n",
    "# Model 2 (Logistic Regression):\n",
    "myLR = LogisticRegression(penalty='l2', tol=0.0001, C=1.0, max_iter=400)\n",
    "myLR.fit(X_train, y_train)\n",
    "LR_predict = myLR.predict(X_test)\n",
    "print('Accuracy of logistic regression: ' + str(accuracy_score(y_test, LR_predict)))\n",
    "\n",
    "# Model 3 (Support Vector):\n",
    "mySVC = SVC(C=1.0, kernel='rbf', random_state=0)\n",
    "mySVC.fit(X_train, y_train)\n",
    "SVC_predict = mySVC.predict(X_test)\n",
    "print('Accuracy of SVC: ' + str(accuracy_score(y_test, SVC_predict)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "m1 = []\n",
    "for i in range(len(X_train)):\n",
    "    m1.append(X_train[i][0])\n",
    "m11 = np.max(m1)\n",
    "m12 = np.min(m1)\n",
    "\n",
    "\n",
    "m2 = []\n",
    "for i in range(len(X_train)):\n",
    "    m2.append(X_train[i][1])\n",
    "m21 = np.max(m2)\n",
    "m22 = np.min(m2)\n",
    "\n",
    "\n",
    "m3 = []\n",
    "for i in range(len(X_train)):\n",
    "    m3.append(X_train[i][2])\n",
    "m31 = np.max(m3)\n",
    "m32 = np.min(m3)\n",
    "\n",
    "\n",
    "m4 = []\n",
    "for i in range(len(X_train)):\n",
    "    m4.append(X_train[i][3])\n",
    "m41 = np.max(m4)\n",
    "m42 = np.min(m4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=[-1.0, 1.0, 5.0, 1.0]\n",
    "b=[-1.0, 2.0, 4.0, 3.0]\n",
    "c=[-1.0, 3.0, 3.0, 2.0]\n",
    "d=[-1.0, 4.0, 2.0, 4.0]\n",
    "e=[-1.0, 5.0, 1.0, 5.0]\n",
    "f=[-1.0, -1.0, -1.0, -1.0]\n",
    "\n",
    "\n",
    "X_train=np.append(X_train, [a,b,c,d,e,f], axis=0)\n",
    "y_train=np.append(y_train, [3,3,3,3,3,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "test2 = []\n",
    "for i in range(len(X_train)):\n",
    "    test2.append([-1.0,round(random.uniform(m22,m21),1),round(random.uniform(m32,m31),1),round(random.uniform(m42,m41),1)])\n",
    "    \n",
    "test_label = []\n",
    "for i in range(len(X_train)):\n",
    "    test_label.append([3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3]\n",
      "Accuracy of decision tree: 0.46875\n",
      "Accuracy of logistic regression: 0.9270833333333334\n",
      "Accuracy of SVC: 1.0\n"
     ]
    }
   ],
   "source": [
    "arr = [[-1.0,-1.0,-1.0,-1.0]]\n",
    "\n",
    "# Model 1 (Decision Tree):\n",
    "myDEC.fit(X_train, y_train)\n",
    "print(myDEC.predict(arr))\n",
    "DEC_predict = myDEC.predict(test2)\n",
    "print('Accuracy of decision tree: ' + str(accuracy_score(test_label, DEC_predict)))\n",
    "\n",
    "# Model 2 (Logistic Regression):\n",
    "myLR = LogisticRegression(penalty='l2', tol=0.0001, C=1.0, max_iter=400)\n",
    "myLR.fit(X_train, y_train)\n",
    "LR_predict = myLR.predict(test2)\n",
    "print('Accuracy of logistic regression: ' + str(accuracy_score(test_label, LR_predict)))\n",
    "\n",
    "# Model 3 (Support Vector):\n",
    "mySVC = SVC(C=1.0, kernel='rbf', random_state=0)\n",
    "mySVC.fit(X_train, y_train)\n",
    "SVC_predict = mySVC.predict(test2)\n",
    "print('Accuracy of SVC: ' + str(accuracy_score(test_label, SVC_predict)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
